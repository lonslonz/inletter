package com.skplanet.gluon;

import java.io.ByteArrayOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;



import com.skplanet.postino.service.model.WfRequest;


/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		
		return "home";
	}
	@RequestMapping(value = "boot", method = RequestMethod.GET)
    public String boot(Locale locale, Model model) {
        
        return "boot";
    }
	@RequestMapping(value = "test", method = RequestMethod.GET)
    public String test(Locale locale, Model model) {
        return "test";
    }  
	@RequestMapping(value = "importTable", method = RequestMethod.GET)
    public String importTable(Locale locale, Model model) {
        return "importTable";
    }  
	@RequestMapping(value = "exportTable", method = RequestMethod.GET)
    public String exportTable(Locale locale, Model model) {
        return "exportTable";
    }  
	@RequestMapping(value = "myimp", method = RequestMethod.GET)
    public String myimp(Locale locale, Model model) {
        return "myimp";
    }  
    
	
	@RequestMapping(value = "login", method = RequestMethod.GET)
    public void login(@RequestParam("user") String user,
                      HttpServletResponse response) throws Exception {
	    Cookie cookie = new Cookie("user", user);
	    cookie.setPath("/");
	    //cookie.setHttpOnly(true);
	    cookie.setMaxAge(3600);
	    response.addCookie(cookie);
	    
	    SimpleDateFormat sdf  = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String curr = sdf.format(new Date());
        String result = "{'user': '" + user + "', 'time' : '" + curr + "'}";
	    
	    ByteArrayOutputStream out = new ByteArrayOutputStream();
	    out.write(result.getBytes());

	    response.setContentType("application/json");
	    response.getOutputStream().write(out.toByteArray());
	        
	    response.getOutputStream().flush();
	    out.close();
	    logger.info("result : " + result.length());
    }  
	@RequestMapping(value = "logout", method = RequestMethod.GET)
    public void logout(@RequestParam("user") String user, 
            HttpServletResponse response) throws Exception {
        Cookie cookie = new Cookie("user", null);
        cookie.setPath("/");
        //cookie.setHttpOnly(true);
        cookie.setMaxAge(0);
        response.addCookie(cookie);
        
        SimpleDateFormat sdf  = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String curr = sdf.format(new Date());
        String result = "{'user': '" + user + "', 'time' : '" + curr + "'}";
        
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(result.getBytes());

        response.setContentType("application/json");
        response.getOutputStream().write(out.toByteArray());
            
        response.getOutputStream().flush();
        out.close();
        logger.info("result : " + result.length());
    }  
	
	@RequestMapping(value = "getc", method = RequestMethod.GET)
	@ResponseBody
    public String getCookie(HttpServletRequest request, HttpServletResponse response) {
        Cookie[] cookies = request.getCookies();
        
        String returnStr = "nothing";
        for(int i = 0; i < cookies.length; i++) {
            Cookie curr = cookies[i];
            String name = curr.getName();
            if(name.equals("user")) {
                returnStr = curr.getValue();
            }
        }

        return returnStr ;
    }  
	@RequestMapping(value = "importTableCall", method = RequestMethod.GET)
    public void importTableCall(
            @RequestParam("source") String source,
            @RequestParam("dest") String dest,
            @RequestParam("overwrite") String overwrite,
            @RequestParam("append") String append,
            HttpServletResponse response) throws Exception {
       
        
	    HashMap<String, Object> params = new HashMap<String, Object>();
        params.put("source", source);
        params.put("dest", dest);
        params.put("overwrite", overwrite);
        params.put("append", append);
        
        String url = "http://localhost:23000/gluon/service/importTable";
        String result = callSimpleService(url, params);
    
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(result.getBytes());

        response.setContentType("application/json");
        response.getOutputStream().write(out.toByteArray());
        response.getOutputStream().flush();
        out.close();
        
        logger.info("result : " + result.length());
    }
	@RequestMapping(value = "exportTableCall", method = RequestMethod.GET)
    public void exportTableCall(
            @RequestParam("source") String source,
            @RequestParam("dest") String dest,
            @RequestParam("overwrite") String overwrite,
            @RequestParam("merge") String merge,
            @RequestParam("fileName") String fileName,
            HttpServletResponse response) throws Exception {
       
        
        HashMap<String, Object> params = new HashMap<String, Object>();
        params.put("source", source);
        params.put("dest", dest);
        params.put("overwrite", overwrite);
        params.put("merge", merge);
        params.put("fileName", fileName);
        
        String url = "http://localhost:23000/gluon/service/exportTable";
        String result = callSimpleService(url, params);
    
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(result.getBytes());

        response.setContentType("application/json");
        response.getOutputStream().write(out.toByteArray());
        response.getOutputStream().flush();
        out.close();
        
        logger.info("result : " + result.length());
    }
	private String callSimpleService(String url, HashMap<String, Object> params) throws Exception {
        
        ObjectMapper mapper = new ObjectMapper();
        String content = null;
        WfRequest req = new WfRequest();
        
        req.setId("gluon");
        req.setRunId("gluon-test");
        req.setParams(params);
        
        content = mapper.writeValueAsString(req);
    
        return HttpUtil.sendHttpPut(url, content);
    }
}
